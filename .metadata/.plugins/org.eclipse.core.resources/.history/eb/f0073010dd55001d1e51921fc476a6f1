package com.example.demo.controller;

import java.util.List;
import java.util.concurrent.TimeUnit;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.CacheControl;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.exceptions.CompanyCodeAlreadyExistsException;
import com.example.demo.model.Company;
import com.example.demo.responsehandler.MyCustomResponse;
import com.example.demo.service.CompanyServiceImpl;

@RestController
@RequestMapping("api/v1.0/market/company")
public class CompanyController {
	
	@Autowired
	private CompanyServiceImpl companyService;
	
	@GetMapping("/getAllCompanyDtl")
	public ResponseEntity<?> getAllCompanyDtl(){
		
		List<Company> companyLst = companyService.getAllCompanyDtl();
		if(companyLst!=null && !companyLst.isEmpty()) {
			
			CacheControl cacheControl = CacheControl.maxAge(30, TimeUnit.MINUTES);
			return ResponseEntity.ok().cacheControl(cacheControl).body(MyCustomResponse.generateCustomResponseformat("Successfully retrived company data",
					HttpStatus.OK, companyLst));
		}
		return  MyCustomResponse.generateCustomResponseformat("could not retrived company data", HttpStatus.CONFLICT, null);
		
	}
	
	@PostMapping("/addCompany")
	public ResponseEntity<?> addCompany(@RequestBody Company company) throws CompanyCodeAlreadyExistsException{
		if(companyService.addCompany(company)!=null) {
		return new ResponseEntity<Company>(company, HttpStatus.CREATED);
			
		}
		return new ResponseEntity<String>("Company object is null", HttpStatus.CONFLICT);
	}
	
	@DeleteMapping("/deleteCompany/{compId}")
	public ResponseEntity<?> deleteCompany(@PathVariable ("compId") int compId){
		System.out.println("In method deleteCompany1 "+compId);
		if(companyService.deleteCompany(compId)) {
			return new ResponseEntity<String>("Company data deleted successfully", HttpStatus.NO_CONTENT);
		}
		System.out.println("In method deleteCompany "+compId);
		return new ResponseEntity<String>("Company data cannot be deleted", HttpStatus.INTERNAL_SERVER_ERROR);
		
	}
	
	@PutMapping("/updateCompany")
	public ResponseEntity<?> updatCompany(@RequestBody Company company){
		if(companyService.updateCompany(company)) {
			return new ResponseEntity<>(company, HttpStatus.CREATED);
		}
		
		return null;
		
	}
	

}
